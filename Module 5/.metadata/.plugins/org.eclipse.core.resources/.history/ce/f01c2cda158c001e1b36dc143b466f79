/*
 *
 * Author: Christopher Richards
 * File: gpiointerrupt.c
 * Date: 11/25/2023
 * email: christopher.richards4@snhu.edu
 *
 * Program utilizes a timer interrupt with a period of 500000us
 * to generate two Morse Code signals: SOS and OK. Pressing either
 * SW2 or SW3 will toggle between the SOS and OK messages. The
 * message will not change until after the current message is
 * finished.
 *
 *
 * Copyright (c) 2015-2020, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== gpiointerrupt.c ========
 */
#include <stdint.h>
#include <stddef.h>

/* Driver Header files */
#include <ti/drivers/GPIO.h>

/* Driver configuration */
#include "ti_drivers_config.h"
#include <ti/drivers/Timer.h>

/* Defining preprocessor macros for the number of ticks for each letter. */
#define SM_S_TICKS 5
#define SM_O_TICKS 11
#define SM_K_TICKS 10
#define SM_PADDING_TICKS 3
#define SM_IDLE_TICKS 7

/* Enumeration of each state machine state. */
enum MC_States {MC_SMStart, MC_SMInit, MC_SMS1, MC_SMO1, MC_SMS2, MC_SMO2, MC_SMK, MC_SMIdle } MC_State;

/* Enumeration to specify which program to run: SOS or OK. */
enum MC_Progs {MC_SOS, MC_OK} MC_Prog;

/* Struct definition that will be used to contain the dash-dot patterns for each letter. */
struct Patterns{
    int dot[10];
    int dash[10];
};

/* Define the dash-dot patterns for each letter in the message. -1 terminates the pattern. */
struct Patterns patternS = {
    {0,1,2,3,4,5,-1},
    {-1}
};
struct Patterns patternO = {
    {-1},
    {0,3,4,7,8,11,-1}
};
struct Patterns patternK = {
    {4,5,-1},
    {0,3,6,9,-1}
};

/* Function containing logic for each period tick of the Morse Code state machine */
void MC_SMTick()
{

    /* We need to keep track of how many ticks of the clock have elapsed. This will reset for each state, defining the number
     * of clock cycles for each character in the message.  */
    static int SMtick = 0;

    /* State Transition. Each state includes the number of clock ticks for each character plus padding between characters.
     * The final Idle state trims the padding from the idle timeout, giving 7 clock ticks between messages.*/
     switch(MC_State)
    {
    case MC_SMInit:
        if(MC_Prog == MC_SOS){
            MC_State = MC_SMS1;
        }
        else{
            MC_State = MC_SMO2;
        }
        break;
    case MC_SMS1:
        if(SMtick == (SM_S_TICKS + SM_PADDING_TICKS - 1)){
            MC_State = MC_SMO1;
            SMtick = -1;
        }
        break;
    case MC_SMO1:
        if(SMtick == (SM_O_TICKS + SM_PADDING_TICKS - 1)){
            MC_State = MC_SMS2;
            SMtick = -1;
        }
        break;
    case MC_SMS2:
        if(SMtick == (SM_S_TICKS + SM_PADDING_TICKS - 1)){
            MC_State = MC_SMIdle;
            SMtick = -1;
        }
        break;
    case MC_SMO2:
        if(SMtick == (SM_O_TICKS + SM_PADDING_TICKS - 1)){
            MC_State = MC_SMK;
            SMtick = -1;
        }
        break;
    case MC_SMK:
        if(SMtick == (SM_K_TICKS + SM_PADDING_TICKS - 1)){
            MC_State = MC_SMIdle;
            SMtick = -1;
        }
        break;
    case MC_SMIdle:
        if(SMtick == (SM_IDLE_TICKS - SM_PADDING_TICKS - 1)){
            MC_State = MC_SMInit;
            SMtick = -1;
        }
        break;
    default:
        break;
    }


    /* Initializing variable to iterate character patterns */
    int i = 0;

    /* State Action logic to display each character pattern. */
    switch(MC_State)
    {
    case MC_SMS1:
        while(patternS.dot[i] > -1){
            if(SMtick % (SM_S_TICKS + SM_PADDING_TICKS) == patternS.dot[i]){
                GPIO_toggle(CONFIG_GPIO_LED_0);
            }
            ++i;
        }
        break;

    case MC_SMO1:
        while(patternO.dash[i] > -1){
            if(SMtick % (SM_O_TICKS + SM_PADDING_TICKS) == patternO.dash[i]){
                GPIO_toggle(CONFIG_GPIO_LED_1);
            }
            ++i;
        }
        break;

    case MC_SMS2:
        while(patternS.dot[i] > -1){
            if(SMtick % (SM_S_TICKS + SM_PADDING_TICKS) == patternS.dot[i]){
                GPIO_toggle(CONFIG_GPIO_LED_0);
            }
            ++i;
        }
        break;

    case MC_SMO2:
        while(patternO.dash[i] > -1){
            if(SMtick % (SM_O_TICKS + SM_PADDING_TICKS) == patternO.dash[i]){
                GPIO_toggle(CONFIG_GPIO_LED_1);
            }
            ++i;
        }
        break;

    case MC_SMK:
        while(patternK.dash[i] > -1){
            if(SMtick % (SM_K_TICKS + SM_PADDING_TICKS) == patternK.dash[i]){
                GPIO_toggle(CONFIG_GPIO_LED_1);
            }
            ++i;
        }

        /* Reassign zero value as we're iterating dashes and dots. */
        i = 0;

        while(patternK.dot[i] > -1){
            if(SMtick % (SM_K_TICKS + SM_PADDING_TICKS) == patternK.dot[i]){
                GPIO_toggle(CONFIG_GPIO_LED_0);
            }
            ++i;
        }
        break;

    default:
        break;
    }
    SMtick++;
}

/*  ======== gpioButtonFxn0 ========
 *  Callback function for the GPIO interrupt on CONFIG_GPIO_BUTTON_0.
 *
 *  Note: GPIO interrupts are cleared prior to invoking callbacks.
 */
void gpioButtonFxn0(uint_least8_t index)
{
    /* Toggle between message programs. */
    MC_Prog = MC_Prog == MC_OK ? MC_SOS : MC_OK;
}

/*
 *  ======== gpioButtonFxn1 ========
 *  Callback function for the GPIO interrupt on CONFIG_GPIO_BUTTON_1.
 *  This may not be used for all boards.
 *
 *  Note: GPIO interrupts are cleared prior to invoking callbacks.
 */
void gpioButtonFxn1(uint_least8_t index)
{
    /* Toggle between message programs. */
    MC_Prog = MC_Prog == MC_OK ? MC_SOS : MC_OK;
}

void timerCallback(Timer_Handle myHandle, int_fast16_t status)
{
    MC_SMTick();
}


void initTimer(void)
{
    Timer_Handle timer0;
    Timer_Params params;
     Timer_init();
     Timer_Params_init(&params);
     params.period = 500000;
     params.periodUnits = Timer_PERIOD_US;
     params.timerMode = Timer_CONTINUOUS_CALLBACK;
     params.timerCallback = timerCallback;

     timer0 = Timer_open(CONFIG_TIMER_0, &params);

     if(timer0 == NULL)
     {
         while (1){}
     }

     if(Timer_start(timer0) == Timer_STATUS_ERROR)
     {
         while (1){}
     }
}


/*
 *  ======== mainThread ========
 */
void *mainThread(void *arg0)
{
    /* Call driver init functions */
    GPIO_init();

    /* Configure the LED and button pins */
    GPIO_setConfig(CONFIG_GPIO_LED_0, GPIO_CFG_OUT_STD | GPIO_CFG_OUT_LOW);
    GPIO_setConfig(CONFIG_GPIO_LED_1, GPIO_CFG_OUT_STD | GPIO_CFG_OUT_LOW);
    GPIO_setConfig(CONFIG_GPIO_BUTTON_0, GPIO_CFG_IN_PU | GPIO_CFG_IN_INT_FALLING);

    /* Turn on user LED */
    GPIO_write(CONFIG_GPIO_LED_0, CONFIG_GPIO_LED_OFF);

    /* Install Button callback */
    GPIO_setCallback(CONFIG_GPIO_BUTTON_0, gpioButtonFxn0);

    /* Enable interrupts */
    GPIO_enableInt(CONFIG_GPIO_BUTTON_0);

    /*
     *  If more than one input pin is available for your device, interrupts
     *  will be enabled on CONFIG_GPIO_BUTTON1.
     */
    if (CONFIG_GPIO_BUTTON_0 != CONFIG_GPIO_BUTTON_1) {
        /* Configure BUTTON1 pin */
        GPIO_setConfig(CONFIG_GPIO_BUTTON_1, GPIO_CFG_IN_PU | GPIO_CFG_IN_INT_FALLING);

        /* Install Button callback */
        GPIO_setCallback(CONFIG_GPIO_BUTTON_1, gpioButtonFxn1);
        GPIO_enableInt(CONFIG_GPIO_BUTTON_1);
    }
    MC_State = MC_SMInit;
    MC_Prog = MC_OK;
    MC_SMTick();
    initTimer();
    return (NULL);
}
